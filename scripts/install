#!/bin/bash
set -e
if [ ! -f ./install ] || [[ "$(pwd)" != */scripts ]]; then
	echo 'Please run from within scripts folder'
	exit 1
fi

# INSTALL PROJECT
if [ -d ../venv ]; then
	echo 'The project is already installed. If this is not the case, run the following command, and then try again:'
	echo -e "  \e[1mrm -r ../venv ./activate ./run ./watch ./run-and-watch ./uninstall\e[0m"
	exit 1
fi

echo -n 'Creating virtual environment... '
python3 -m venv ../venv
ln -s ../venv/bin/activate
echo 'Virtual environment created!'
echo

echo 'Installing requirements in virtual environment... '
(source ./activate; cd ..; python3 -m pip install -r ./requirements.txt)
echo 'Requirements installed!'
echo

echo 'Creating scripts...'
stump="$(mktemp)"
trap "rm $stump" EXIT
chmod u+x $stump
sed '/^# INSTALL PROJECT$/Q' ./install > $stump

echo -n '[ ] ./run '
{ cat $stump; cat << 'EOF'; } > ./run && chmod u+x ./run
# RUN PROJECT
source ./activate
cd ..
FLASK_APP=flaskmarkdown FLASK_DEBUG=TRUE flask run
EOF
echo -e "\r[x"

echo -n '[ ] ./watch '
{ cat $stump; cat << 'EOF'; } > ./watch && chmod u+x ./watch
# WATCH FOR CHANGES
cd ..
filetype='md'
watch_folder='md'
keyword=' - alcrea.info'
printf "Watching $(realpath "$watch_folder") and subfolders for changes in .${filetype} files...\n"
while true; do
        new_hash="$(ls -lR --time-style=full-iso "$watch_folder" | grep -E '^'"$watch_folder"'|'"$filetype"'$')"
        hash="${hash:-$new_hash}"
        if [[ "$new_hash" != "$hash" ]]; then
                hash="$new_hash"
                printf "Detected change, refreshing\n"
                current_window="$(xdotool getwindowfocus)"
                window="$(xdotool search --onlyvisible --name "$keyword" | head -1)"
                if [ -z "$window" ]; then
                        printf "No visible window to refresh\n"
                else
                    	xdotool windowactivate "$window"
                        xdotool key 'ctrl+alt+r'
                        xdotool windowactivate "$current_window"
                fi
        fi
	sleep 1
done
EOF
echo -e "\r[x"

echo -n '[ ] ./run-and-watch '
{ cat $stump; cat << 'EOF'; } > ./run-and-watch && chmod u+x ./run-and-watch
# RUN PROJECT AND WATCH FOR CHANGES
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT
run_prefix="$(echo -e "\e[34;1m  run\e[0;1m: \e[0m")"
watch_prefix="$(echo -e "\e[35;1mwatch\e[0;1m: \e[0m")"
./run 2>&1 | sed "s/^/$run_prefix/g" &
sleep 2
./watch 2>&1 | sed "s/^/$watch_prefix/g"
EOF
echo -e "\r[x"

echo -n '[ ] ./uninstall '
{ cat $stump; cat << 'EOF'; } > ./uninstall && chmod u+x ./uninstall
# UNINSTALL PROJECT
echo 'Removing virtual environment'
rm -r ../venv
echo 'Removing scripts'
rm ./activate ./run ./watch ./run-and-watch
echo 'Project was uninstalled successfully!'
rm ./uninstall
EOF
sed -i '/^set -e/d' ./uninstall
echo -e '\r[x'
echo 'Scripts created!'
echo

echo -e "\e[4m--- Project was installed successfully! ---\e[0m"
echo 'Run application:'
echo -e "  \e[1m./run\e[0m"
echo 'Launch file watcher service:'
echo -e "  \e[1m./watch\e[0m"
echo 'Activate/deactivate virtual environment:'
echo -e "\e[2m(you can deactivate from anywhere)\e[0m"
echo -e "  \e[1msource ./activate\e[0m"
echo -e "  \e[1mdeactivate\e[0m"
echo 'Uninstall:'
echo -e "  \e[1m./uninstall\e[0m"
